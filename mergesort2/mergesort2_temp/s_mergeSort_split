digraph clustermergeSort {
	graph [label=mergeSort]
	1 [label="c[15] += 1
if len(nlist) > 1:
"]
	2 [label="c[1] += 1
if len(nlist) % 2 == 0:
"]
	5 [label="c[2] += 1
mid = len(nlist) // 2
lefthalf = nlist[:mid]
righthalf = nlist[mid:]
mergeSort(lefthalf)
mergeSort(righthalf)
i = j = k = 0
"]
	18 [label="while i < len(lefthalf) and j < len(righthalf):
"]
	19 [label="c[3] += 1
if lefthalf[i] < righthalf[j]:
"]
	21 [label="c[4] += 1
nlist[k] = lefthalf[i]
i += 1
"]
	22 [label="k += 1
"]
	22 -> 18 [label=""]
	21 -> 22 [label=""]
	19 -> 21 [label="lefthalf[i] < righthalf[j]"]
	23 [label="c[5] += 1
nlist[k] = righthalf[j]
j += 1
"]
	23 -> 22 [label=""]
	19 -> 23 [label="(lefthalf[i] >= righthalf[j])"]
	18 -> 19 [label="i < len(lefthalf) and j < len(righthalf)"]
	20 [label="while i < len(lefthalf):
"]
	24 [label="c[6] += 1
nlist[k] = lefthalf[i]
i += 1
k += 1
"]
	24 -> 20 [label=""]
	20 -> 24 [label="i < len(lefthalf)"]
	25 [label="while j < len(righthalf):
"]
	26 [label="c[7] += 1
nlist[k] = righthalf[j]
j += 1
k += 1
"]
	26 -> 25 [label=""]
	25 -> 26 [label="j < len(righthalf)"]
	20 -> 25 [label="(i >= len(lefthalf))"]
	18 -> 20 [label="(not (i < len(lefthalf) and j < len(righthalf)))"]
	5 -> 18 [label=""]
	2 -> 5 [label="len(nlist) % 2 == 0"]
	7 [label="c[8] += 1
mid = len(nlist) // 2
lefthalf = nlist[:mid]
righthalf = nlist[mid:]
mergeSort(lefthalf)
mergeSort(righthalf)
i = j = k = 0
"]
	8 [label="while i < len(lefthalf) and j < len(righthalf):
"]
	9 [label="c[9] += 1
if lefthalf[i] < righthalf[j]:
"]
	11 [label="c[10] += 1
nlist[k] = lefthalf[i]
i += 1
"]
	12 [label="k += 1
"]
	12 -> 8 [label=""]
	11 -> 12 [label=""]
	9 -> 11 [label="lefthalf[i] < righthalf[j]"]
	13 [label="c[11] += 1
nlist[k] = righthalf[j]
j += 1
"]
	13 -> 12 [label=""]
	9 -> 13 [label="(lefthalf[i] >= righthalf[j])"]
	8 -> 9 [label="i < len(lefthalf) and j < len(righthalf)"]
	10 [label="while i < len(lefthalf):
"]
	14 [label="c[12] += 1
nlist[k] = lefthalf[i]
i += 1
k += 1
"]
	14 -> 10 [label=""]
	10 -> 14 [label="i < len(lefthalf)"]
	15 [label="while j < len(righthalf):
"]
	16 [label="c[13] += 1
nlist[k] = righthalf[j]
j += 1
k += 1
"]
	16 -> 15 [label=""]
	15 -> 16 [label="j < len(righthalf)"]
	10 -> 15 [label="(i >= len(lefthalf))"]
	8 -> 10 [label="(not (i < len(lefthalf) and j < len(righthalf)))"]
	7 -> 8 [label=""]
	2 -> 7 [label="(len(nlist) % 2 != 0)"]
	1 -> 2 [label="len(nlist) > 1"]
	4 [label="c[14] += 1
"]
	1 -> 4 [label="(len(nlist) <= 1)"]
}
