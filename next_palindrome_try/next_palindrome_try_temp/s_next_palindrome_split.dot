digraph clusternext_palindrome {
	graph [bb="0,0,686.29,897.31",
		label=next_palindrome,
		lheight=0.22,
		lp="343.14,11.875",
		lwidth=1.29
	];
	node [label="\N"];
	1	[height=1.7039,
		label="c[7] += 1
digit_list = sorted(digit_list)
n = len(digit_list)
mid = n // 2
if n % 2 == 0:
",
		pos="486.1,835.97",
		width=3.3489];
	2	[height=1.3946,
		label="c[1] += 1
left_side = digit_list[:mid]
left_side_reverse = left_side[::-1]
candidate = left_side + left_side_reverse
",
		pos="356.1,672.67",
		width=4.7631];
	1 -> 2	[label="n % 2 == 0",
		lp="452.98,748.75",
		pos="e,395.07,722.02 441,779.01 428.38,763.35 414.65,746.31 401.98,730.6"];
	4	[height=0.77585,
		label="c[2] += 1
return digit_list
",
		pos="616.1,672.67",
		width=1.9495];
	1 -> 4	[label="(n % 2 != 0)",
		lp="593.6,748.75",
		pos="e,595.11,699.72 531.21,779.01 550.12,755.55 571.51,729 588.09,708.43"];
	3	[height=0.5,
		label="if candidate > digit_list:
",
		pos="356.1,567.47",
		width=2.7075];
	2 -> 3	[pos="e,356.1,585.87 356.1,622.19 356.1,613.63 356.1,605 356.1,597.23"];
	6	[height=0.77585,
		label="c[3] += 1
return candidate
",
		pos="287.1,469.79",
		width=2.0673];
	3 -> 6	[label="candidate > digit_list",
		lp="381.23,523.59",
		pos="e,301.16,497.61 338.37,549.36 333.1,543.88 327.5,537.63 322.85,531.47 317.2,523.97 311.72,515.52 306.83,507.35"];
	7	[height=0.5,
		label="for i in range(mid - 1, -1, -1):
",
		pos="496.1,469.79",
		width=3.2481];
	3 -> 7	[label="(candidate <= digit_list)",
		lp="523.85,523.59",
		pos="e,483.17,488.1 401.83,551.19 414.47,545.92 427.81,539.33 439.1,531.47 452.91,521.87 465.94,508.46 476.05,496.69"];
	9	[height=0.77585,
		label="c[4] += 1
if digit_list[i] < 9:
",
		pos="279.1,362.18",
		width=2.1999];
	7 -> 9	[label="range(mid - 1, -1, -1)",
		lp="434.23,415.98",
		pos="e,313.95,387.44 447.18,453.04 424.97,445.25 398.63,435.11 375.85,423.86 358.02,415.05 339.31,403.83 323.15,393.43"];
	10	[height=0.5,
		label="return [1] + [0] * (n - 1) + [1]
",
		pos="496.1,362.18",
		width=3.3174];
	7 -> 10	[pos="e,496.1,380.64 496.1,451.35 496.1,435.22 496.1,410.95 496.1,391.95"];
	11	[height=1.0852,
		label="c[5] += 1
digit_list[i] += 1
if i != n - i - 1:
",
		pos="279.1,243.43",
		width=2.082];
	9 -> 11	[label="digit_list[i] < 9",
		lp="319.98,308.37",
		pos="e,279.1,282.68 279.1,333.81 279.1,321.91 279.1,307.58 279.1,293.93"];
	12	[height=0.77585,
		label="digit_list[i] = 0
digit_list[n - i - 1] = 0
",
		pos="519.1,243.43",
		width=2.6566];
	9 -> 12	[label="(digit_list[i] >= 9)",
		lp="448.6,308.37",
		pos="e,470.69,267.98 324.81,338.94 363.3,320.22 418.61,293.32 460.38,273"];
	13	[height=0.77585,
		label="c[6] += 1
digit_list[n - i - 1] = digit_list[i]
",
		pos="195.1,124.68",
		width=3.6878];
	11 -> 13	[label="i != n - i - 1",
		lp="268.98,178.49",
		pos="e,214.37,152.46 253.22,206.45 242.94,192.16 231.14,175.76 220.87,161.49"];
	14	[height=0.5,
		label="return digit_list[:mid] + [digit_list[mid]] * (n % 2) + digit_list[mid - 1::-1]
",
		pos="279.1,41.75",
		width=7.7529];
	11 -> 14	[label="(i == n - i - 1)",
		lp="382.35,124.68",
		pos="e,305.85,59.931 308.55,207.22 319.81,191.53 331.33,172.2 337.1,152.61 344.13,128.8 347.01,119.51 337.1,96.75 332.19,85.47 323.64,\
75.481 314.58,67.258"];
	13 -> 14	[pos="e,261.07,60.124 222.61,97.181 232.38,87.768 243.34,77.206 252.99,67.908"];
	12 -> 7	[pos="e,543.99,453 562.51,268.78 585.42,284.25 611.36,306.57 624.1,334.25 634.49,356.8 636.22,368.44 624.1,390.11 609.05,417.04 580.57,\
435.88 554.3,448.36"];
}
