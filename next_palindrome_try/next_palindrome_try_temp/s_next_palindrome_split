digraph clusternext_palindrome {
	graph [label=next_palindrome]
	1 [label="c[7] += 1
digit_list = sorted(digit_list)
n = len(digit_list)
mid = n // 2
if n % 2 == 0:
"]
	2 [label="c[1] += 1
left_side = digit_list[:mid]
left_side_reverse = left_side[::-1]
candidate = left_side + left_side_reverse
"]
	3 [label="if candidate > digit_list:
"]
	6 [label="c[3] += 1
return candidate
"]
	3 -> 6 [label="candidate > digit_list"]
	7 [label="for i in range(mid - 1, -1, -1):
"]
	9 [label="c[4] += 1
if digit_list[i] < 9:
"]
	11 [label="c[5] += 1
digit_list[i] += 1
if i != n - i - 1:
"]
	13 [label="c[6] += 1
digit_list[n - i - 1] = digit_list[i]
"]
	14 [label="return digit_list[:mid] + [digit_list[mid]] * (n % 2) + digit_list[mid - 1::-1]
"]
	13 -> 14 [label=""]
	11 -> 13 [label="i != n - i - 1"]
	11 -> 14 [label="(i == n - i - 1)"]
	9 -> 11 [label="digit_list[i] < 9"]
	12 [label="digit_list[i] = 0
digit_list[n - i - 1] = 0
"]
	12 -> 7 [label=""]
	9 -> 12 [label="(digit_list[i] >= 9)"]
	7 -> 9 [label="range(mid - 1, -1, -1)"]
	10 [label="return [1] + [0] * (n - 1) + [1]
"]
	7 -> 10 [label=""]
	3 -> 7 [label="(candidate <= digit_list)"]
	2 -> 3 [label=""]
	1 -> 2 [label="n % 2 == 0"]
	4 [label="c[2] += 1
return digit_list
"]
	1 -> 4 [label="(n % 2 != 0)"]
}
